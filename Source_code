import cv2
import numpy as np
import math as m

# distance scaling factor (you can adjust this as needed)
distance_threshold = 0.06912  

# open default camera (0 = laptop webcam, try 1/2 if you use external cam)
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("❌ Error: Could not open camera.")
    exit()

while True:
    ret, img = cap.read()
    if not ret:
        print("❌ Failed to grab frame")
        break

    # convert to HSV color space
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    # yellow color range
    lower_yellow = np.array([20, 100, 100])
    upper_yellow = np.array([30, 255, 255])

    # mask yellow objects
    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

    # result image with mask applied
    result = cv2.bitwise_and(img, img, mask=mask)

    # find contours of yellow objects
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    XY = []
    le = 65  # starting ASCII value for labeling (A, B, C...)

    for contour in contours:
        if cv2.contourArea(contour) > 500:  # ignore small objects
            text = chr(le)
            le += 1

            x, y, w, h = cv2.boundingRect(contour)
            cx = x + w // 2
            cy = y + h // 2

            XY.append([cx, cy])

            # draw rectangle + center point
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)
            cv2.circle(img, (cx, cy), 5, (0, 0, 255), -1)

            # label with letter
            cv2.putText(img, text, (cx - 50, cy + 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 3)

    # measure distance between detected points
    for i in range(len(XY) - 1):
        x1, y1 = XY[i]
        x2, y2 = XY[i + 1]
        distance = m.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

        tx = (x1 + x2) // 2
        ty = (y1 + y2) // 2
        cv2.line(img, (x1, y1), (x2, y2), (255, 0, 0), 2)
        cv2.putText(img, f'{distance * distance_threshold:.2f} cm', (tx, ty),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)

    # show windows
    cv2.imshow("HSV", hsv)
    cv2.imshow("Mask", mask)
    cv2.imshow("Result", result)
    cv2.imshow("Final Output", img)

    # quit on "q"
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
